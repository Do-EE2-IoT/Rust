// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connect {
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connack {
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
/// Gửi khi client muốn ngắt kết nối
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Disconnect {
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ping {
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ack {
    #[prost(uint32, tag = "1")]
    pub client_id: u32,
    #[prost(string, tag = "2")]
    pub message_id: ::prost::alloc::string::String,
}
/// Yêu cầu tính toán phép toán, gửi từ Client → Server
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpressionRequest {
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    /// để tiện cho ACK
    #[prost(double, tag = "2")]
    pub message_id: f64,
    #[prost(double, tag = "3")]
    pub operand1: f64,
    #[prost(double, tag = "4")]
    pub operand2: f64,
    #[prost(double, tag = "5")]
    pub operand3: f64,
    /// "+", "-", "*", "/"
    #[prost(string, tag = "6")]
    pub operator1: ::prost::alloc::string::String,
    /// "+", "-", "*", "/"
    #[prost(string, tag = "7")]
    pub operator2: ::prost::alloc::string::String,
}
/// Kết quả phép tính trả về từ Server → Client
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpressionResult {
    /// để tiện cho ACK
    #[prost(double, tag = "1")]
    pub message_id: f64,
    #[prost(double, tag = "2")]
    pub result: f64,
}
/// Gói bọc tổng quát cho client gửi đi
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientMessage {
    #[prost(oneof = "client_message::Payload", tags = "1, 2, 3, 4, 5")]
    pub payload: ::core::option::Option<client_message::Payload>,
}
/// Nested message and enum types in `ClientMessage`.
pub mod client_message {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        Connect(super::Connect),
        #[prost(message, tag = "2")]
        Disconnect(super::Disconnect),
        #[prost(message, tag = "3")]
        Ping(super::Ping),
        #[prost(message, tag = "4")]
        ExpressionRequest(super::ExpressionRequest),
        #[prost(message, tag = "5")]
        Ack(super::Ack),
    }
}
/// Gói bọc tổng quát cho server gửi đi
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerMessage {
    #[prost(oneof = "server_message::Payload", tags = "1, 2, 3")]
    pub payload: ::core::option::Option<server_message::Payload>,
}
/// Nested message and enum types in `ServerMessage`.
pub mod server_message {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        Connack(super::Connack),
        #[prost(message, tag = "2")]
        ExpressionResult(super::ExpressionResult),
        #[prost(message, tag = "3")]
        Ack(super::Ack),
    }
}
